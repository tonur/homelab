#!/usr/sbin/nft -f
flush ruleset

# edge_gateway_mode: {{ edge_gateway_mode }} (template rendered)

table inet filter {
  chain input {
    type filter hook input priority 0;
    policy drop;
    ct state {established, related} accept
    iif lo accept
    # Allow SSH via tailscale (100.64.0.0/10) or WireGuard peer
    ip saddr 100.64.0.0/10 tcp dport 22 accept
    ip saddr {{ edge_gateway_wg_peer }} tcp dport 22 accept
    # Allow SSH from anywhere (broad). Consider tightening later with CIDR list.
    tcp dport 22 accept
    # Allow WireGuard UDP
    udp dport {{ edge_gateway_wireguard_port }} accept
    # Allow DNS on standard port 53 (will be DNATed to {{ edge_gateway_coredns_nodeport_udp }}/{{ edge_gateway_coredns_nodeport_tcp }})
    udp dport 53 accept
    tcp dport 53 accept
    # Allow DNS on NodePorts from WireGuard peer (for direct access)
    ip saddr {{ edge_gateway_wg_peer }} udp dport {{ edge_gateway_coredns_nodeport_udp }} accept
    ip saddr {{ edge_gateway_wg_peer }} tcp dport {{ edge_gateway_coredns_nodeport_tcp }} accept
    # HTTP/HTTPS ingress (either to local proxy or for DNAT prerouting)
    tcp dport { {{ edge_gateway_ingress_ports | join(', ') }} } accept
  }
  chain forward {
    type filter hook forward priority 0;
    policy drop;
    ct state {established, related} accept
    # Allow WireGuard interface traffic forwarding (needed for peer communication)
    iif "wg0" accept
    oif "wg0" accept
    {% if edge_gateway_mode == 'dnat' %}
    # DNAT forwarding path eth0 -> wg0 limited to backend VIP ports
    iif "eth0" oif "wg0" tcp dport { {{ edge_gateway_ingress_ports | join(', ') }} } ip daddr {{ edge_gateway_traefik_vip }} accept
    iif "wg0" oif "eth0" ct state {established, related} accept
    {% else %}
    # Proxy mode: HAProxy forwards traffic over wg0 to backend services
    # Allow HAProxy to reach Traefik NodePorts
    iif "lo" oif "wg0" tcp dport { {{ edge_gateway_proxy_backend_http_port }}, {{ edge_gateway_proxy_backend_https_port }} } ip daddr {{ edge_gateway_traefik_vip }} accept
    iif "wg0" oif "lo" ct state {established, related} accept
    {% endif %}
    # DNS forwarding (DNAT) - works in both proxy and dnat modes
    iif "eth0" oif "wg0" udp dport {{ edge_gateway_coredns_nodeport_udp }} ip daddr {{ edge_gateway_traefik_vip }} accept
    iif "eth0" oif "wg0" tcp dport {{ edge_gateway_coredns_nodeport_tcp }} ip daddr {{ edge_gateway_traefik_vip }} accept
    iif "wg0" oif "eth0" ct state {established, related} accept
  }
  chain output {
    type filter hook output priority 0;
    policy accept;
  }
}

{% if edge_gateway_mode == 'dnat' %}
# DNAT mode NAT table
table ip nat {
  set rfc1918 {
    type ipv4_addr
    flags interval
    elements = { 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16 }
  }
  
  chain prerouting {
    type nat hook prerouting priority -100;
    # DNAT inbound HTTP/HTTPS to Traefik VIP
    tcp dport 80  dnat to {{ edge_gateway_traefik_vip }}:80
    tcp dport 443 dnat to {{ edge_gateway_traefik_vip }}:443
    # DNAT inbound DNS to CoreDNS NodePorts
    udp dport 53 dnat to {{ edge_gateway_traefik_vip }}:{{ edge_gateway_coredns_nodeport_udp }}
    tcp dport 53 dnat to {{ edge_gateway_traefik_vip }}:{{ edge_gateway_coredns_nodeport_tcp }}
  }
  chain postrouting {
    type nat hook postrouting priority 100;
    # SNAT external clients only (not RFC1918), preserve internal client IPs
    oif "wg0" ip saddr != @rfc1918 udp dport {{ edge_gateway_coredns_nodeport_udp }} snat to 10.172.90.2
    oif "wg0" ip saddr != @rfc1918 tcp dport {{ edge_gateway_coredns_nodeport_tcp }} snat to 10.172.90.2
    # No MASQUERADE for HTTP/HTTPS to preserve client IP (requires symmetric routing)
  }
}
{% else %}
# Proxy mode: DNS uses DNAT (HAProxy doesn't support UDP), HTTP/HTTPS use HAProxy
table ip nat {
  set rfc1918 {
    type ipv4_addr
    flags interval
    elements = { 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16 }
  }
  
  chain prerouting {
    type nat hook prerouting priority -100;
    # DNAT inbound DNS to CoreDNS NodePorts (HAProxy can't handle UDP)
    udp dport 53 dnat to {{ edge_gateway_traefik_vip }}:{{ edge_gateway_coredns_nodeport_udp }}
    tcp dport 53 dnat to {{ edge_gateway_traefik_vip }}:{{ edge_gateway_coredns_nodeport_tcp }}
    # HTTP/HTTPS handled by HAProxy, not DNAT
  }
  chain postrouting {
    type nat hook postrouting priority 100;
    # dnsdist handles DNS forwarding locally, only MASQUERADE its outbound traffic  
    oif "wg0" masquerade
    # No MASQUERADE for HTTP/HTTPS to preserve client IP
  }
}
{% endif %}
