---
# CoreDNS Authoritative DNS Server - Complete Configuration
# This deploys a separate CoreDNS instance with:
# - Deployment using NodePort service on 31053
# - External service with externalTrafficPolicy: Local
# - ConfigMap with authoritative DNS records for kragh.dev
# - nftables DNAT rules route port 53 -> NodePort 31053
apiVersion: apps/v1
kind: Deployment
metadata:
  name: coredns-authoritative
  namespace: kube-system
  labels:
    app.kubernetes.io/name: coredns-authoritative
    app.kubernetes.io/component: dns
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: coredns-authoritative
  template:
    metadata:
      labels:
        app.kubernetes.io/name: coredns-authoritative
    spec:
      containers:
        - name: coredns
          image: coredns/coredns:1.11.1
          ports:
            - name: dns-udp
              containerPort: 53
              protocol: UDP
            - name: dns-tcp
              containerPort: 53
              protocol: TCP
          args:
            - -conf
            - /etc/coredns/Corefile
          volumeMounts:
            - name: config-volume
              mountPath: /etc/coredns
              readOnly: true
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
                - NET_BIND_SERVICE
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
      volumes:
        - name: config-volume
          configMap:
            name: coredns-authoritative-config
            items:
              - key: Corefile
                path: Corefile
      nodeSelector:
        kubernetes.io/hostname: "beelink" # Choose which node to run on
      tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
---
# NodePort Service to expose CoreDNS on port 31053
apiVersion: v1
kind: Service
metadata:
  name: coredns-authoritative
  namespace: kube-system
  labels:
    app.kubernetes.io/name: coredns-authoritative
    app.kubernetes.io/component: dns
spec:
  type: NodePort
  selector:
    app.kubernetes.io/name: coredns-authoritative
  ports:
    - name: dns-udp
      port: 53
      targetPort: 53
      protocol: UDP
      nodePort: 31053
    - name: dns-tcp
      port: 53
      targetPort: 53
      protocol: TCP
      nodePort: 31053
  # Ensure external traffic can reach this
  externalTrafficPolicy: Local
---
# CoreDNS configuration for authoritative DNS
apiVersion: v1
kind: ConfigMap
metadata:
  name: coredns-authoritative-config
  namespace: kube-system
data:
  Corefile: |
    kragh.dev:53 {
        errors
        ready
        log
        
        # SOA record
        template IN SOA kragh.dev {
            answer "kragh.dev 3600 IN SOA ns1.kragh.dev. admin.kragh.dev. 2025090902 86400 10800 3600000 3600"
        }
        
        # NS records
        template IN NS kragh.dev {
            answer "kragh.dev 3600 IN NS ns1.kragh.dev."
            answer "kragh.dev 3600 IN NS helium.ns.hetzner.de."
            answer "kragh.dev 3600 IN NS hydrogen.ns.hetzner.com."
            answer "kragh.dev 3600 IN NS oxygen.ns.hetzner.com."
            additional "ns1.kragh.dev 300 IN A 198.55.102.244"
        }
        
        # MX records
        template IN MX kragh.dev {
            match "^kragh\.dev\.$"
            answer "kragh.dev 3600 IN MX 10 mail.protonmail.ch."
            answer "kragh.dev 3600 IN MX 20 mailsec.protonmail.ch."
        }
        
        # A records - Root domain
        template IN A kragh.dev {
            match "^kragh\.dev\.$"
            answer "kragh.dev 300 IN A 198.55.102.244"
        }
        
        # A records - Wildcard for all subdomains
        template IN A kragh.dev {
            match ".*\.kragh\.dev\.$"
            answer "{{ .Name }} 300 IN A 198.55.102.244"
        }
        
        # Specific mail service A records
        template IN A kragh.dev {
            match "^(imap|mail|pop3|smtp|webmail)\.kragh\.dev\.$"
            answer "{{ .Name }} 3600 IN A 104.21.16.201"
            fallthrough
        }
        
        template IN A kragh.dev {
            match "^pop3\.kragh\.dev\.$"
            answer "pop3.kragh.dev 3600 IN A 172.67.215.230"
        }
        
        # TXT records
        template IN TXT kragh.dev {
            match "^kragh\.dev\.$"
            answer "kragh.dev 3600 IN TXT \"v=spf1 include:_spf.protonmail.ch mx ~all\""
            answer "kragh.dev 3600 IN TXT \"protonmail-verification=6aafd588ba3176a40fd0c2ff73163bd695112cd4\""
            answer "kragh.dev 300 IN TXT \"google-site-verification=7KOsydnaXFkW0IAMtmd_Kw6dSj6el3D8asu71GWJp5A\""
        }
        
        template IN TXT kragh.dev {
            match "^_dmarc\.kragh\.dev\.$"
            answer "_dmarc.kragh.dev 3600 IN TXT \"v=DMARC1; p=quarantine\""
        }
        
        # CNAME records for ProtonMail DKIM
        template IN CNAME kragh.dev {
            match "^protonmail\._domainkey\.kragh\.dev\.$"
            answer "protonmail._domainkey.kragh.dev 3600 IN CNAME protonmail.domainkey.drr7mijuybfzxjq43mzpoy3n54tcy6zw7vagwgdkhy4t7cavfscfa.domains.proton.ch."
        }
        
        template IN CNAME kragh.dev {
            match "^protonmail2\._domainkey\.kragh\.dev\.$"
            answer "protonmail2._domainkey.kragh.dev 3600 IN CNAME protonmail2.domainkey.drr7mijuybfzxjq43mzpoy3n54tcy6zw7vagwgdkhy4t7cavfscfa.domains.proton.ch."
        }
        
        template IN CNAME kragh.dev {
            match "^protonmail3\._domainkey\.kragh\.dev\.$"
            answer "protonmail3._domainkey.kragh.dev 3600 IN CNAME protonmail3.domainkey.drr7mijuybfzxjq43mzpoy3n54tcy6zw7vagwgdkhy4t7cavfscfa.domains.proton.ch."
        }
        
        # Transfer block - allow AXFR to Hetzner
        transfer {
            to 213.239.242.238  # ns1.first-ns.de
            to 213.133.105.6    # ns2.first-ns.de  
            to 88.198.229.192   # ns3.first-ns.de
        }
        
        # Fallback
        forward . 1.1.1.1 8.8.8.8
    }

    # Health check endpoint
    .:8080 {
        health {
            lameduck 5s
        }
        ready
        prometheus
    }
